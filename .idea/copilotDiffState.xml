<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/network/kanari/wallet_kari/components/CreateWallet.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/network/kanari/wallet_kari/components/CreateWallet.kt" />
              <option name="originalContent" value="package network.kanari.wallet_kari.components&#10;&#10;import android.content.Context&#10;import android.content.SharedPreferences&#10;import android.content.res.Configuration&#10;import androidx.compose.foundation.BorderStroke&#10;import androidx.compose.foundation.border&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.draw.shadow&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;import androidx.compose.ui.unit.dp&#10;import androidx.navigation.NavController&#10;import org.bitcoinj.crypto.MnemonicCode&#10;import java.security.SecureRandom&#10;import androidx.compose.ui.platform.LocalClipboardManager&#10;import androidx.compose.ui.text.AnnotatedString&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.navigation.compose.rememberNavController&#10;import network.kanari.wallet_kari.components.widget.CustomTextField&#10;import network.kanari.wallet_kari.ui.theme.WalletkariTheme&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun CreateWallet(navController: NavController) {&#10;    val context = LocalContext.current&#10;    var password by remember { mutableStateOf(&quot;&quot;) }&#10;    var mnemonic by remember { mutableStateOf(&quot;&quot;) }&#10;    var showMnemonic by remember { mutableStateOf(false) }&#10;    var mnemonicLength by remember { mutableStateOf(12) }&#10;    var expanded by remember { mutableStateOf(false) }&#10;    val clipboardManager = LocalClipboardManager.current&#10;    var passwordMismatchError by remember { mutableStateOf(false) }&#10;    var passwordVisible by remember { mutableStateOf(false) }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            shape = RoundedCornerShape(8.dp),&#10;            colors = CardDefaults.cardColors(MaterialTheme.colorScheme.inverseOnSurface,),&#10;            elevation = CardDefaults.cardElevation(8.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                verticalArrangement = Arrangement.Center,&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                Text(text = &quot;Create Wallet&quot;, style = MaterialTheme.typography.titleLarge)&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                CustomTextField(&#10;                    value = password,&#10;                    onValueChange = {&#10;                        password = it&#10;                        passwordMismatchError = false&#10;                    },&#10;                    label = &quot;Enter Password&quot;,&#10;                    placeholder = &quot;Password&quot;,&#10;                    isPassword = true,&#10;                    passwordVisible = passwordVisible,&#10;                    onPasswordVisibilityChange = { passwordVisible = !passwordVisible },&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    shadowElevation = 8.dp,&#10;                    visualTransformation = PasswordVisualTransformation(),&#10;                    isError = passwordMismatchError&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                ExposedDropdownMenuBox(&#10;                    expanded = expanded,&#10;                    onExpandedChange = { expanded = !expanded }&#10;                ) {&#10;                    TextField(&#10;                        value = if (mnemonicLength == 12) &quot;12 words&quot; else &quot;24 words&quot;,&#10;                        onValueChange = {},&#10;                        readOnly = true,&#10;                        label = { Text(&quot;Mnemonic Length&quot;) },&#10;                        trailingIcon = {&#10;                            ExposedDropdownMenuDefaults.TrailingIcon(expanded = expanded)&#10;                        },&#10;                        modifier = Modifier&#10;                            .menuAnchor() // Ensure the dropdown menu is anchored to the text field&#10;                            .fillMaxWidth()&#10;                            .padding(horizontal = 16.dp)&#10;                            .border(&#10;                                BorderStroke(&#10;                                    color = Color.Transparent,&#10;                                    width = 1.dp&#10;                                ),&#10;                                shape = RoundedCornerShape(10.dp)&#10;                            )&#10;                            .clip(RoundedCornerShape(10.dp))&#10;                            .shadow(elevation = 8.dp, shape = RoundedCornerShape(10.dp)),&#10;                        colors = ExposedDropdownMenuDefaults.textFieldColors(&#10;                            unfocusedIndicatorColor = Color.Transparent,&#10;                            focusedIndicatorColor = Color.Transparent,&#10;                        ),&#10;                    )&#10;                    ExposedDropdownMenu(&#10;                        expanded = expanded,&#10;                        onDismissRequest = { expanded = false },&#10;&#10;                    ) {&#10;                        DropdownMenuItem(&#10;                            text = { Text(&quot;12 words&quot;) },&#10;                            onClick = {&#10;                                mnemonicLength = 12&#10;                                expanded = false&#10;                            },&#10;                        )&#10;                        DropdownMenuItem(&#10;                            text = { Text(&quot;24 words&quot;) },&#10;                            onClick = {&#10;                                mnemonicLength = 24&#10;                                expanded = false&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                Button(&#10;                    onClick = {&#10;                        mnemonic = generateMnemonic(mnemonicLength)&#10;                        showMnemonic = true&#10;                    },&#10;                    enabled = password.isNotEmpty() // Enable button only if password is not empty&#10;                ) {&#10;                    Text(&quot;Create Wallet&quot;)&#10;                }&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                Button(onClick = {&#10;                    navController.navigate(&quot;import_wallet&quot;)&#10;                }) {&#10;                    Text(text = &quot;import_wallet&quot;)&#10;                }&#10;            }&#10;        }&#10;        if (showMnemonic) {&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                elevation = CardDefaults.cardElevation(8.dp)&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(16.dp),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Text(&quot;Mnemonic: $mnemonic&quot;, modifier = Modifier.padding(top = 16.dp))&#10;                    Row {&#10;                        Button(onClick = {&#10;                            saveWallet(context, mnemonic, password)&#10;                            navController.navigate(&quot;home_screen&quot;)&#10;                        }) {&#10;                            Text(&quot;Save Wallet&quot;)&#10;                        }&#10;                        Spacer(modifier = Modifier.width(16.dp))&#10;                        Button(onClick = {&#10;                            clipboardManager.setText(AnnotatedString(mnemonic))&#10;                        }) {&#10;                            Text(&quot;Copy Mnemonic&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Preview(showBackground = true)&#10;@Preview(uiMode = Configuration.UI_MODE_NIGHT_YES,showBackground = true)&#10;@Composable&#10;fun CreateWalletScreenPreview() {&#10;    WalletkariTheme{&#10;        CreateWallet(&#10;            navController = rememberNavController(),&#10;        )&#10;    }&#10;}&#10;&#10;fun generateMnemonic(wordCount: Int): String {&#10;    val secureRandom = SecureRandom()&#10;    val entropy = ByteArray(wordCount / 3 * 4)&#10;    secureRandom.nextBytes(entropy)&#10;    return MnemonicCode.INSTANCE.toMnemonic(entropy).joinToString(&quot; &quot;)&#10;}&#10;&#10;fun saveWallet(context: Context, mnemonic: String, password: String) {&#10;    val sharedPreferences: SharedPreferences = context.getSharedPreferences(&quot;wallet_prefs&quot;, Context.MODE_PRIVATE)&#10;    with(sharedPreferences.edit()) {&#10;        putString(&quot;mnemonic&quot;, mnemonic)&#10;        putString(&quot;password&quot;, password)&#10;        apply()&#10;    }&#10;}" />
              <option name="updatedContent" value="package network.kanari.wallet_kari.components&#10;&#10;import android.content.Context&#10;import android.content.SharedPreferences&#10;import android.content.res.Configuration&#10;import androidx.compose.foundation.BorderStroke&#10;import androidx.compose.foundation.border&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.draw.shadow&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;import androidx.compose.ui.unit.dp&#10;import androidx.navigation.NavController&#10;import org.bitcoinj.crypto.MnemonicCode&#10;import java.security.SecureRandom&#10;import androidx.compose.ui.platform.LocalClipboardManager&#10;import androidx.compose.ui.text.AnnotatedString&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.navigation.compose.rememberNavController&#10;import network.kanari.wallet_kari.components.widget.CustomTextField&#10;import network.kanari.wallet_kari.ui.theme.WalletkariTheme&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun CreateWallet(navController: NavController) {&#10;    val context = LocalContext.current&#10;    var password by remember { mutableStateOf(&quot;&quot;) }&#10;    var mnemonic by remember { mutableStateOf(&quot;&quot;) }&#10;    var showMnemonic by remember { mutableStateOf(false) }&#10;    var mnemonicLength by remember { mutableStateOf(12) }&#10;    var expanded by remember { mutableStateOf(false) }&#10;    val clipboardManager = LocalClipboardManager.current&#10;    var passwordMismatchError by remember { mutableStateOf(false) }&#10;    var passwordVisible by remember { mutableStateOf(false) }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            shape = RoundedCornerShape(8.dp),&#10;            colors = CardDefaults.cardColors(MaterialTheme.colorScheme.inverseOnSurface,),&#10;            elevation = CardDefaults.cardElevation(8.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                verticalArrangement = Arrangement.Center,&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                Text(text = &quot;Create Wallet&quot;, style = MaterialTheme.typography.titleLarge)&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                CustomTextField(&#10;                    value = password,&#10;                    onValueChange = {&#10;                        password = it&#10;                        passwordMismatchError = false&#10;                    },&#10;                    label = &quot;Enter Password&quot;,&#10;                    placeholder = &quot;Password&quot;,&#10;                    isPassword = true,&#10;                    passwordVisible = passwordVisible,&#10;                    onPasswordVisibilityChange = { passwordVisible = !passwordVisible },&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    shadowElevation = 8.dp,&#10;                    visualTransformation = PasswordVisualTransformation(),&#10;                    isError = passwordMismatchError&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                ExposedDropdownMenuBox(&#10;                    expanded = expanded,&#10;                    onExpandedChange = { expanded = !expanded }&#10;                ) {&#10;                    TextField(&#10;                        value = if (mnemonicLength == 12) &quot;12 words&quot; else &quot;24 words&quot;,&#10;                        onValueChange = {},&#10;                        readOnly = true,&#10;                        label = { Text(&quot;Mnemonic Length&quot;) },&#10;                        trailingIcon = {&#10;                            ExposedDropdownMenuDefaults.TrailingIcon(expanded = expanded)&#10;                        },&#10;                        modifier = Modifier&#10;                            .menuAnchor() // Ensure the dropdown menu is anchored to the text field&#10;                            .fillMaxWidth()&#10;                            .padding(horizontal = 16.dp)&#10;                            .border(&#10;                                BorderStroke(&#10;                                    color = Color.Transparent,&#10;                                    width = 1.dp&#10;                                ),&#10;                                shape = RoundedCornerShape(10.dp)&#10;                            )&#10;                            .clip(RoundedCornerShape(10.dp))&#10;                            .shadow(elevation = 8.dp, shape = RoundedCornerShape(10.dp)),&#10;                        colors = ExposedDropdownMenuDefaults.textFieldColors(&#10;                            unfocusedIndicatorColor = Color.Transparent,&#10;                            focusedIndicatorColor = Color.Transparent,&#10;                        ),&#10;                    )&#10;                    ExposedDropdownMenu(&#10;                        expanded = expanded,&#10;                        onDismissRequest = { expanded = false },&#10;&#10;                    ) {&#10;                        DropdownMenuItem(&#10;                            text = { Text(&quot;12 words&quot;) },&#10;                            onClick = {&#10;                                mnemonicLength = 12&#10;                                expanded = false&#10;                            },&#10;                        )&#10;                        DropdownMenuItem(&#10;                            text = { Text(&quot;24 words&quot;) },&#10;                            onClick = {&#10;                                mnemonicLength = 24&#10;                                expanded = false&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                Button(&#10;                    onClick = {&#10;                        mnemonic = generateMnemonic(mnemonicLength)&#10;                        showMnemonic = true&#10;                    },&#10;                    enabled = password.isNotEmpty() // Enable button only if password is not empty&#10;                ) {&#10;                    Text(&quot;Create Wallet&quot;)&#10;                }&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                Button(onClick = {&#10;                    navController.navigate(&quot;import_wallet&quot;)&#10;                }) {&#10;                    Text(text = &quot;import_wallet&quot;)&#10;                }&#10;            }&#10;        }&#10;        if (showMnemonic) {&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                elevation = CardDefaults.cardElevation(8.dp)&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(16.dp),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Text(&quot;Mnemonic: $mnemonic&quot;, modifier = Modifier.padding(top = 16.dp))&#10;                    Row {&#10;                        Button(onClick = {&#10;                            saveWallet(context, mnemonic, password)&#10;                            navController.navigate(&quot;home_screen&quot;)&#10;                        }) {&#10;                            Text(&quot;Save Wallet&quot;)&#10;                        }&#10;                        Spacer(modifier = Modifier.width(16.dp))&#10;                        Button(onClick = {&#10;                            clipboardManager.setText(AnnotatedString(mnemonic))&#10;                        }) {&#10;                            Text(&quot;Copy Mnemonic&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Preview(showBackground = true)&#10;@Preview(uiMode = Configuration.UI_MODE_NIGHT_YES,showBackground = true)&#10;@Composable&#10;fun CreateWalletScreenPreview() {&#10;    WalletkariTheme{&#10;        CreateWallet(&#10;            navController = rememberNavController(),&#10;        )&#10;    }&#10;}&#10;&#10;fun generateMnemonic(wordCount: Int): String {&#10;    val secureRandom = SecureRandom()&#10;    val entropy = ByteArray(wordCount / 3 * 4)&#10;    secureRandom.nextBytes(entropy)&#10;    return MnemonicCode.INSTANCE.toMnemonic(entropy).joinToString(&quot; &quot;)&#10;}&#10;&#10;fun saveWallet(context: Context, mnemonic: String, password: String) {&#10;    val sharedPreferences: SharedPreferences = context.getSharedPreferences(&quot;wallet_prefs&quot;, Context.MODE_PRIVATE)&#10;    with(sharedPreferences.edit()) {&#10;        putString(&quot;mnemonic&quot;, mnemonic)&#10;        putString(&quot;password&quot;, password)&#10;        apply()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/network/kanari/wallet_kari/components/ImportWallet.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/network/kanari/wallet_kari/components/ImportWallet.kt" />
              <option name="originalContent" value="package network.kanari.wallet_kari.components&#10;&#10;import android.content.Context&#10;import android.content.res.Configuration&#10;import androidx.compose.foundation.BorderStroke&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.RadioButton&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TextField&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;&#10;import androidx.compose.material3.RadioButtonDefaults&#10;import androidx.compose.runtime.mutableIntStateOf&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.navigation.NavController&#10;import androidx.navigation.compose.rememberNavController&#10;import network.kanari.wallet_kari.ui.theme.WalletkariTheme&#10;&#10;import androidx.compose.material3.AlertDialog&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardColors&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.ExposedDropdownMenuDefaults.textFieldColors&#10;import androidx.compose.material3.TextButton&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.draw.shadow&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;import network.kanari.wallet_kari.components.widget.CustomTextField&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun ImportWallet(navController: NavController) {&#10;    var wordCount by remember { mutableIntStateOf(12) }&#10;    var seedPhrase by remember { mutableStateOf(&quot;&quot;) }&#10;    var showError by remember { mutableStateOf(false) }&#10;    var showPasswordDialog by remember { mutableStateOf(false) }&#10;    var inputPassword by remember { mutableStateOf(&quot;&quot;) }&#10;    var confirmPassword by remember { mutableStateOf(&quot;&quot;) }&#10;    var passwordError by remember { mutableStateOf(false) }&#10;    var passwordMismatchError by remember { mutableStateOf(false) }&#10;    val context = LocalContext.current&#10;    val sharedPreferences = context.getSharedPreferences(&quot;wallet_prefs&quot;, Context.MODE_PRIVATE)&#10;    var passwordVisible_1 by remember { mutableStateOf(false) }&#10;    var passwordVisible_2 by remember { mutableStateOf(false) }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;        verticalArrangement = Arrangement.Center,&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            shape = RoundedCornerShape(8.dp),&#10;            colors = CardDefaults.cardColors(MaterialTheme.colorScheme.inverseOnSurface,),&#10;            elevation = CardDefaults.cardElevation(8.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                verticalArrangement = Arrangement.Center,&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                Text(text = &quot;Import Wallet&quot;, style = MaterialTheme.typography.titleLarge)&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                Row(verticalAlignment = Alignment.CenterVertically) {&#10;                    RadioButton(&#10;                        selected = wordCount == 12,&#10;                        onClick = { wordCount = 12 },&#10;                        colors = RadioButtonDefaults.colors(&#10;                            selectedColor = MaterialTheme.colorScheme.primary,&#10;                            unselectedColor = MaterialTheme.colorScheme.onSurface,&#10;                            disabledSelectedColor = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.38f),&#10;                            disabledUnselectedColor = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.38f)&#10;                        )&#10;                    )&#10;                    Text(text = &quot;12 words&quot;)&#10;                    Spacer(modifier = Modifier.width(16.dp))&#10;                    RadioButton(&#10;                        selected = wordCount == 24,&#10;                        onClick = { wordCount = 24 },&#10;                        colors = RadioButtonDefaults.colors(&#10;                            selectedColor = MaterialTheme.colorScheme.primary,&#10;                            unselectedColor = MaterialTheme.colorScheme.onSurface,&#10;                            disabledSelectedColor = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.38f),&#10;                            disabledUnselectedColor = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.38f)&#10;                        )&#10;                    )&#10;                    Text(text = &quot;24 words&quot;)&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                CustomTextField(&#10;                    value = seedPhrase,&#10;                    onValueChange = { seedPhrase = it },&#10;                    label = &quot;Seed Phrase&quot;,&#10;                    placeholder = &quot;Enter your seed phrase&quot;,&#10;                    isPassword = false,&#10;                    passwordVisible = false,&#10;                    onPasswordVisibilityChange = null,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    shadowElevation = 4.dp,&#10;                    visualTransformation = PasswordVisualTransformation(),&#10;                    isError = showError,&#10;                )&#10;                if (showError) {&#10;                    Text(&#10;                        text = &quot;Invalid seed phrase&quot;,&#10;                        color = MaterialTheme.colorScheme.error,&#10;                        style = MaterialTheme.typography.bodySmall&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                Button(onClick = {&#10;                    showPasswordDialog = true&#10;                }) {&#10;                    Text(text = &quot;Import Wallet&quot;)&#10;                }&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                Button(onClick = {&#10;                    navController.navigate(&quot;create_wallet&quot;)&#10;                }) {&#10;                    Text(text = &quot;Create Wallet&quot;)&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    if (showPasswordDialog) {&#10;        AlertDialog(&#10;            onDismissRequest = { showPasswordDialog = false },&#10;            title = { Text(&quot;Set Password&quot;) },&#10;            text = {&#10;                Column {&#10;                    CustomTextField(&#10;                        value = inputPassword,&#10;                        onValueChange = {&#10;                            inputPassword = it&#10;                            passwordMismatchError = false&#10;                        },&#10;                        label = &quot;password&quot;,&#10;                        placeholder = &quot;Enter your password again&quot;,&#10;                        isPassword = true,&#10;                        passwordVisible = passwordVisible_1,&#10;                        onPasswordVisibilityChange = { passwordVisible_1 = !passwordVisible_1 },&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        shadowElevation = 8.dp,&#10;                        visualTransformation = PasswordVisualTransformation(),&#10;                        isError = passwordMismatchError&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    CustomTextField(&#10;                        value = confirmPassword,&#10;                        onValueChange = {&#10;                            confirmPassword = it&#10;                            passwordMismatchError = false&#10;                        },&#10;                        label = &quot;Confirm Password&quot;,&#10;                        placeholder = &quot;Enter your password again&quot;,&#10;                        isPassword = true,&#10;                        passwordVisible = passwordVisible_2,&#10;                        onPasswordVisibilityChange = { passwordVisible_2 = !passwordVisible_2 },&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        shadowElevation = 8.dp,&#10;                        visualTransformation = PasswordVisualTransformation(),&#10;                        isError = passwordMismatchError&#10;                    )&#10;                    if (passwordMismatchError) {&#10;                        Text(&#10;                            text = &quot;Passwords do not match&quot;,&#10;                            color = MaterialTheme.colorScheme.error,&#10;                            style = MaterialTheme.typography.bodySmall&#10;                        )&#10;                    }&#10;                }&#10;            },&#10;            confirmButton = {&#10;                TextButton(onClick = {&#10;                    if (inputPassword.isNotEmpty() &amp;&amp; inputPassword == confirmPassword) {&#10;                        val words = seedPhrase.trim().split(&quot;\\s+&quot;.toRegex())&#10;                        showError = words.size != wordCount&#10;                        if (!showError) {&#10;                            with(sharedPreferences.edit()) {&#10;                                putString(&quot;mnemonic&quot;, seedPhrase)&#10;                                putString(&quot;password&quot;, inputPassword)&#10;                                apply()&#10;                            }&#10;                            navController.navigate(&quot;home_screen&quot;)&#10;                        }&#10;                        showPasswordDialog = false&#10;                    } else {&#10;                        passwordMismatchError = true&#10;                    }&#10;                }) {&#10;                    Text(&quot;Confirm&quot;)&#10;                }&#10;            },&#10;            dismissButton = {&#10;                TextButton(onClick = { showPasswordDialog = false }) {&#10;                    Text(&quot;Cancel&quot;)&#10;                }&#10;            }&#10;        )&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Preview(showBackground = true)&#10;@Preview(uiMode = Configuration.UI_MODE_NIGHT_YES,showBackground = true)&#10;@Composable&#10;fun LoginScreenPreview() {&#10;    WalletkariTheme{&#10;        ImportWallet(&#10;            navController = rememberNavController(),&#10;        )&#10;    }&#10;}" />
              <option name="updatedContent" value="package network.kanari.wallet_kari.components&#10;&#10;import android.content.Context&#10;import android.content.res.Configuration&#10;import androidx.compose.foundation.BorderStroke&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.RadioButton&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TextField&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;&#10;import androidx.compose.material3.RadioButtonDefaults&#10;import androidx.compose.runtime.mutableIntStateOf&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.navigation.NavController&#10;import androidx.navigation.compose.rememberNavController&#10;import network.kanari.wallet_kari.ui.theme.WalletkariTheme&#10;&#10;import androidx.compose.material3.AlertDialog&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardColors&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.ExposedDropdownMenuDefaults.textFieldColors&#10;import androidx.compose.material3.TextButton&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.draw.shadow&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;import network.kanari.wallet_kari.components.widget.CustomTextField&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun ImportWallet(navController: NavController) {&#10;    var wordCount by remember { mutableIntStateOf(12) }&#10;    var seedPhrase by remember { mutableStateOf(&quot;&quot;) }&#10;    var showError by remember { mutableStateOf(false) }&#10;    var showPasswordDialog by remember { mutableStateOf(false) }&#10;    var inputPassword by remember { mutableStateOf(&quot;&quot;) }&#10;    var confirmPassword by remember { mutableStateOf(&quot;&quot;) }&#10;    var passwordError by remember { mutableStateOf(false) }&#10;    var passwordMismatchError by remember { mutableStateOf(false) }&#10;    val context = LocalContext.current&#10;    val sharedPreferences = context.getSharedPreferences(&quot;wallet_prefs&quot;, Context.MODE_PRIVATE)&#10;    var passwordVisible_1 by remember { mutableStateOf(false) }&#10;    var passwordVisible_2 by remember { mutableStateOf(false) }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;        verticalArrangement = Arrangement.Center,&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            shape = RoundedCornerShape(8.dp),&#10;            colors = CardDefaults.cardColors(MaterialTheme.colorScheme.inverseOnSurface,),&#10;            elevation = CardDefaults.cardElevation(8.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                verticalArrangement = Arrangement.Center,&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                Text(text = &quot;Import Wallet&quot;, style = MaterialTheme.typography.titleLarge)&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                Row(verticalAlignment = Alignment.CenterVertically) {&#10;                    RadioButton(&#10;                        selected = wordCount == 12,&#10;                        onClick = { wordCount = 12 },&#10;                        colors = RadioButtonDefaults.colors(&#10;                            selectedColor = MaterialTheme.colorScheme.primary,&#10;                            unselectedColor = MaterialTheme.colorScheme.onSurface,&#10;                            disabledSelectedColor = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.38f),&#10;                            disabledUnselectedColor = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.38f)&#10;                        )&#10;                    )&#10;                    Text(text = &quot;12 words&quot;)&#10;                    Spacer(modifier = Modifier.width(16.dp))&#10;                    RadioButton(&#10;                        selected = wordCount == 24,&#10;                        onClick = { wordCount = 24 },&#10;                        colors = RadioButtonDefaults.colors(&#10;                            selectedColor = MaterialTheme.colorScheme.primary,&#10;                            unselectedColor = MaterialTheme.colorScheme.onSurface,&#10;                            disabledSelectedColor = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.38f),&#10;                            disabledUnselectedColor = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.38f)&#10;                        )&#10;                    )&#10;                    Text(text = &quot;24 words&quot;)&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                CustomTextField(&#10;                    value = seedPhrase,&#10;                    onValueChange = { seedPhrase = it },&#10;                    label = &quot;Seed Phrase&quot;,&#10;                    placeholder = &quot;Enter your seed phrase&quot;,&#10;                    isPassword = false,&#10;                    passwordVisible = false,&#10;                    onPasswordVisibilityChange = null,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    shadowElevation = 4.dp,&#10;                    visualTransformation = PasswordVisualTransformation(),&#10;                    isError = showError,&#10;                )&#10;                if (showError) {&#10;                    Text(&#10;                        text = &quot;Invalid seed phrase&quot;,&#10;                        color = MaterialTheme.colorScheme.error,&#10;                        style = MaterialTheme.typography.bodySmall&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                Button(onClick = {&#10;                    showPasswordDialog = true&#10;                }) {&#10;                    Text(text = &quot;Import Wallet&quot;)&#10;                }&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                Button(onClick = {&#10;                    navController.navigate(&quot;create_wallet&quot;)&#10;                }) {&#10;                    Text(text = &quot;Create Wallet&quot;)&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    if (showPasswordDialog) {&#10;        AlertDialog(&#10;            onDismissRequest = { showPasswordDialog = false },&#10;            title = { Text(&quot;Set Password&quot;) },&#10;            text = {&#10;                Column {&#10;                    CustomTextField(&#10;                        value = inputPassword,&#10;                        onValueChange = {&#10;                            inputPassword = it&#10;                            passwordMismatchError = false&#10;                        },&#10;                        label = &quot;password&quot;,&#10;                        placeholder = &quot;Enter your password again&quot;,&#10;                        isPassword = true,&#10;                        passwordVisible = passwordVisible_1,&#10;                        onPasswordVisibilityChange = { passwordVisible_1 = !passwordVisible_1 },&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        shadowElevation = 8.dp,&#10;                        visualTransformation = PasswordVisualTransformation(),&#10;                        isError = passwordMismatchError&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    CustomTextField(&#10;                        value = confirmPassword,&#10;                        onValueChange = {&#10;                            confirmPassword = it&#10;                            passwordMismatchError = false&#10;                        },&#10;                        label = &quot;Confirm Password&quot;,&#10;                        placeholder = &quot;Enter your password again&quot;,&#10;                        isPassword = true,&#10;                        passwordVisible = passwordVisible_2,&#10;                        onPasswordVisibilityChange = { passwordVisible_2 = !passwordVisible_2 },&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        shadowElevation = 8.dp,&#10;                        visualTransformation = PasswordVisualTransformation(),&#10;                        isError = passwordMismatchError&#10;                    )&#10;                    if (passwordMismatchError) {&#10;                        Text(&#10;                            text = &quot;Passwords do not match&quot;,&#10;                            color = MaterialTheme.colorScheme.error,&#10;                            style = MaterialTheme.typography.bodySmall&#10;                        )&#10;                    }&#10;                }&#10;            },&#10;            confirmButton = {&#10;                TextButton(onClick = {&#10;                    if (inputPassword.isNotEmpty() &amp;&amp; inputPassword == confirmPassword) {&#10;                        val words = seedPhrase.trim().split(&quot;\\s+&quot;.toRegex())&#10;                        showError = words.size != wordCount&#10;                        if (!showError) {&#10;                            with(sharedPreferences.edit()) {&#10;                                putString(&quot;mnemonic&quot;, seedPhrase)&#10;                                putString(&quot;password&quot;, inputPassword)&#10;                                apply()&#10;                            }&#10;                            navController.navigate(&quot;home_screen&quot;)&#10;                        }&#10;                        showPasswordDialog = false&#10;                    } else {&#10;                        passwordMismatchError = true&#10;                    }&#10;                }) {&#10;                    Text(&quot;Confirm&quot;)&#10;                }&#10;            },&#10;            dismissButton = {&#10;                TextButton(onClick = { showPasswordDialog = false }) {&#10;                    Text(&quot;Cancel&quot;)&#10;                }&#10;            }&#10;        )&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Preview(showBackground = true)&#10;@Preview(uiMode = Configuration.UI_MODE_NIGHT_YES,showBackground = true)&#10;@Composable&#10;fun LoginScreenPreview() {&#10;    WalletkariTheme{&#10;        ImportWallet(&#10;            navController = rememberNavController(),&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/network/kanari/wallet_kari/components/widget/TextField.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/network/kanari/wallet_kari/components/widget/TextField.kt" />
              <option name="originalContent" value="package network.kanari.wallet_kari.components.widget&#10;&#10;import androidx.compose.foundation.BorderStroke&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.ExposedDropdownMenuDefaults.textFieldColors&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TextField&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.draw.shadow&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;import androidx.compose.ui.text.input.VisualTransformation&#10;import androidx.compose.ui.unit.Dp&#10;import androidx.compose.ui.unit.dp&#10;import network.kanari.wallet_kari.R&#10;&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun CustomTextField(&#10;    value: String,&#10;    onValueChange: (String) -&gt; Unit,&#10;    label: @Composable String,&#10;    placeholder: String,&#10;    isPassword: Boolean = false,&#10;    passwordVisible: Boolean = false,&#10;    onPasswordVisibilityChange: (() -&gt; Unit)? = null,&#10;    modifier: Modifier = Modifier,&#10;    shadowElevation: Dp = 8.dp,&#10;    visualTransformation: PasswordVisualTransformation,&#10;    isError: Boolean,&#10;    placeholderColor: Color = Color.Gray,&#10;    labelColor: Color = Color.Black,&#10;    borderColor: Color = Color.Transparent,&#10;    keyboardOptions: KeyboardOptions = KeyboardOptions.Default // Set default keyboard options&#10;) {&#10;    TextField(&#10;        value = value,&#10;        onValueChange = onValueChange,&#10;        label = { Text(label, color = labelColor) },&#10;        placeholder = { Text(placeholder, color = placeholderColor) },&#10;        visualTransformation = if (isPassword &amp;&amp; !passwordVisible) PasswordVisualTransformation() else VisualTransformation.None,&#10;        keyboardOptions = keyboardOptions, // Use keyboardOptions parameter&#10;        modifier = modifier&#10;            .fillMaxWidth()&#10;            .padding(horizontal = 16.dp)&#10;            .border(&#10;                BorderStroke(&#10;                    color = borderColor,&#10;                    width = 1.dp&#10;                ),&#10;                shape = RoundedCornerShape(10.dp)&#10;            )&#10;            .clip(RoundedCornerShape(10.dp))&#10;            .shadow(shadowElevation, RoundedCornerShape(10.dp)),&#10;        colors = textFieldColors(&#10;            unfocusedIndicatorColor = Color.Transparent,&#10;            focusedIndicatorColor = Color.Transparent,&#10;        ),&#10;        trailingIcon = if (isPassword) {&#10;            {&#10;                val image = if (passwordVisible) {&#10;                    painterResource(id = R.drawable.visibility)&#10;                } else {&#10;                    painterResource(id = R.drawable.visibility_off)&#10;                }&#10;&#10;                IconButton(onClick = onPasswordVisibilityChange!!) {&#10;                    Icon(&#10;                        modifier = Modifier.size(24.dp),&#10;                        painter = image,&#10;                        contentDescription = if (passwordVisible) &quot;Hide password&quot; else &quot;Show password&quot;&#10;                    )&#10;                }&#10;            }&#10;        } else null&#10;    )&#10;}" />
              <option name="updatedContent" value="package network.kanari.wallet_kari.components.widget&#10;&#10;import androidx.compose.foundation.BorderStroke&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.ExposedDropdownMenuDefaults.textFieldColors&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TextField&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.draw.shadow&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;import androidx.compose.ui.text.input.VisualTransformation&#10;import androidx.compose.ui.unit.Dp&#10;import androidx.compose.ui.unit.dp&#10;import network.kanari.wallet_kari.R&#10;&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun CustomTextField(&#10;    value: String,&#10;    onValueChange: (String) -&gt; Unit,&#10;    label: @Composable String,&#10;    placeholder: String,&#10;    isPassword: Boolean = false,&#10;    passwordVisible: Boolean = false,&#10;    onPasswordVisibilityChange: (() -&gt; Unit)? = null,&#10;    modifier: Modifier = Modifier,&#10;    shadowElevation: Dp = 8.dp,&#10;    visualTransformation: PasswordVisualTransformation,&#10;    isError: Boolean,&#10;    placeholderColor: Color = Color.Gray,&#10;    labelColor: Color = Color.Black,&#10;    borderColor: Color = Color.Transparent,&#10;    keyboardOptions: KeyboardOptions = KeyboardOptions.Default // Set default keyboard options&#10;) {&#10;    TextField(&#10;        value = value,&#10;        onValueChange = onValueChange,&#10;        label = { Text(label, color = labelColor) },&#10;        placeholder = { Text(placeholder, color = placeholderColor) },&#10;        visualTransformation = if (isPassword &amp;&amp; !passwordVisible) PasswordVisualTransformation() else VisualTransformation.None,&#10;        keyboardOptions = keyboardOptions, // Use keyboardOptions parameter&#10;        modifier = modifier&#10;            .fillMaxWidth()&#10;            .padding(horizontal = 16.dp)&#10;            .border(&#10;                BorderStroke(&#10;                    color = borderColor,&#10;                    width = 1.dp&#10;                ),&#10;                shape = RoundedCornerShape(10.dp)&#10;            )&#10;            .clip(RoundedCornerShape(10.dp))&#10;            .shadow(shadowElevation, RoundedCornerShape(10.dp)),&#10;        colors = textFieldColors(&#10;            unfocusedIndicatorColor = Color.Transparent,&#10;            focusedIndicatorColor = Color.Transparent,&#10;        ),&#10;        trailingIcon = if (isPassword) {&#10;            {&#10;                val image = if (passwordVisible) {&#10;                    painterResource(id = R.drawable.visibility)&#10;                } else {&#10;                    painterResource(id = R.drawable.visibility_off)&#10;                }&#10;&#10;                IconButton(onClick = onPasswordVisibilityChange!!) {&#10;                    Icon(&#10;                        modifier = Modifier.size(24.dp),&#10;                        painter = image,&#10;                        contentDescription = if (passwordVisible) &quot;Hide password&quot; else &quot;Show password&quot;&#10;                    )&#10;                }&#10;            }&#10;        } else null&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/network/kanari/wallet_kari/ui/theme/Type.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/network/kanari/wallet_kari/ui/theme/Type.kt" />
              <option name="originalContent" value="package network.kanari.wallet_kari.ui.theme&#10;&#10;import androidx.compose.material3.Typography&#10;import androidx.compose.ui.text.TextStyle&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.sp&#10;&#10;// Set of Material typography styles to start with&#10;val Typography = Typography(&#10;    bodyLarge = TextStyle(&#10;        fontFamily = FontFamily.Default,&#10;        fontWeight = FontWeight.Normal,&#10;        fontSize = 16.sp,&#10;        lineHeight = 24.sp,&#10;        letterSpacing = 0.5.sp&#10;    )&#10;    /* Other default text styles to override&#10;    titleLarge = TextStyle(&#10;        fontFamily = FontFamily.Default,&#10;        fontWeight = FontWeight.Normal,&#10;        fontSize = 22.sp,&#10;        lineHeight = 28.sp,&#10;        letterSpacing = 0.sp&#10;    ),&#10;    labelSmall = TextStyle(&#10;        fontFamily = FontFamily.Default,&#10;        fontWeight = FontWeight.Medium,&#10;        fontSize = 11.sp,&#10;        lineHeight = 16.sp,&#10;        letterSpacing = 0.5.sp&#10;    )&#10;    */&#10;)" />
              <option name="updatedContent" value="package network.kanari.wallet_kari.ui.theme&#10;&#10;import androidx.compose.material3.Typography&#10;import androidx.compose.ui.text.TextStyle&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.sp&#10;&#10;// Set of Material typography styles to start with&#10;val Typography = Typography(&#10;    bodyLarge = TextStyle(&#10;        fontFamily = FontFamily.Default,&#10;        fontWeight = FontWeight.Normal,&#10;        fontSize = 16.sp,&#10;        lineHeight = 24.sp,&#10;        letterSpacing = 0.5.sp&#10;    )&#10;    /* Other default text styles to override&#10;    titleLarge = TextStyle(&#10;        fontFamily = FontFamily.Default,&#10;        fontWeight = FontWeight.Normal,&#10;        fontSize = 22.sp,&#10;        lineHeight = 28.sp,&#10;        letterSpacing = 0.sp&#10;    ),&#10;    labelSmall = TextStyle(&#10;        fontFamily = FontFamily.Default,&#10;        fontWeight = FontWeight.Medium,&#10;        fontSize = 11.sp,&#10;        lineHeight = 16.sp,&#10;        letterSpacing = 0.5.sp&#10;    )&#10;    */&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>